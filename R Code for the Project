library(tidyverse)
library(caret)
library(readxl)
library(MASS)
library(pROC)
library(mlbench)
library(corrplot)

# Loading in Data ----
nba <- read_xlsx('historicalnbadata.xlsx')
nba
head(nba)
str(nba)
nba$allNBA <- as.factor(nba$allNBA)
nba$allStar <- as.factor(nba$allStar)

nba1 <- nba %>%
  group_by(allNBA) %>%
  mutate(meanPPG = mean(PPG))
nba1

# keeping only these dimensions ----
nba2 <- nba %>%
  dplyr::select(teamWins, overallSeed, PPG, TRB, AST, STL, BLK, WS, VORP, allStar, allNBA)
str(nba2)

nbacorr <- nba %>%
  dplyr::select(teamWins, overallSeed, PPG, TRB, AST, STL, BLK, WS, VORP)

nbacorr2 <- nba %>%
  dplyr::select(teamWins, overallSeed, PPG, TRB, AST, STL, BLK, WS, VORP, BPM)
# our all star break test data that we're going to use the final model on.
nbaAllStarTest <- read_xlsx('allstarbreakdata.xlsx')
str(nbaAllStarTest3)
nbaAllStarTest3 <- nbaAllStarTest %>%
  dplyr::select(teamWins, overallSeed, PPG, TRB, AST, STL, BLK, WS, VORP, allStar, allNBA)
nbaAllStarTest3$allStar <- as.factor(nbaAllStarTest3$allStar)
nbaAllStarTest3$allNBA <- as.factor(nbaAllStarTest3$allNBA)

# Scatterplots ----
# PPG
PPGplot <- ggplot(nba, aes(PPG, teamWins, color = allNBA)) +
  geom_point() +
  scale_color_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35)) +
  scale_y_continuous(breaks = c(20, 30, 40, 50, 60, 70)) +
  labs(title = 'Historical Regular Season Team Wins vs Player PPG', caption = 'Data via basketball-reference.com',
       y = 'Team Wins', x = 'Points per Game') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
PPGplot

# VORP
VORPplot <- ggplot(nba, aes(VORP, teamWins, color = allNBA)) +
  geom_point() +
  scale_color_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12)) +
  scale_y_continuous(breaks = c(20, 30, 40, 50, 60, 70)) +
  labs(title = 'Historical Regular Season Team Wins vs VORP', caption = 'Data via basketball-reference.com',
       y = 'Team Wins') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
VORPplot

# Win Shares
WSxPPGplot <- ggplot(nba, aes(PPG, WS, color = allNBA)) +
  geom_point() +
  scale_color_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35)) +
  scale_y_continuous(breaks = c(0, 5, 10, 15, 20)) +
  labs(title = 'Historical Regular Season Win Shares vs PPG', caption = 'Data via basketball-reference.com',
       y = 'Win Shares', x = 'Points per Game') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
WSxPPGplot

# VORP vs Win Shares
VORPxWSplot <- ggplot(nba, aes(VORP, WS, color = allNBA)) +
  geom_point() +
  scale_color_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12)) +
  scale_y_continuous(breaks = c(0, 5, 10, 15, 20)) +
  labs(title = 'Historical Regular Season Win Shares vs VORP', caption = 'Data via basketball-reference.com',
       y = 'Win Shares') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
VORPxWSplot

# BPM vs Team Wins
BPMplot <- ggplot(nba, aes(BPM, teamWins, color = allNBA)) +
  geom_point() +
  scale_color_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(-4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16)) +
  scale_y_continuous(breaks = c(20, 30, 40, 50, 60, 70)) +
  labs(title = 'Historical Regular Season Team Wins vs Player BPM', caption = 'Data via basketball-reference.com',
       y = 'Team Wins', x = 'BPM') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
BPMplot

# Histograms ----
# PPG
PPGhist <- ggplot(nba, aes(x = PPG, fill = allNBA)) +
  geom_histogram(alpha=0.5, position="stack") + 
  scale_fill_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  labs(title = 'PPG Histogram', caption = 'Data via basketball-reference.com',
       x = 'Points per Game') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
PPGhist

# VORP
VORPhist <- ggplot(nba, aes(x = VORP, fill = allNBA)) +
  geom_histogram(alpha=0.5, position="stack") + 
  scale_fill_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12)) +
  labs(title = 'VORP Histogram', caption = 'Data via basketball-reference.com') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
VORPhist

# Win Shares
WShist <- ggplot(nba, aes(x = WS, fill = allNBA)) +
  geom_histogram(alpha=0.5, position="stack") + 
  scale_fill_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(0, 5, 10, 15, 20)) +
  labs(title = 'Win Shares Histogram', caption = 'Data via basketball-reference.com',
       x = 'Win Shares') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
WShist

# Team Wins 
Winshist <- ggplot(nba, aes(x = teamWins, fill = allNBA)) +
  geom_histogram(alpha=0.5, position="stack") + 
  scale_fill_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(20, 30, 40, 50, 60, 70)) +
  labs(title = 'Team Wins Histogram', caption = 'Data via basketball-reference.com',
       x = 'Team Wins') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
Winshist

# BPM
BPMhist <- ggplot(nba, aes(x = BPM, fill = allNBA)) +
  geom_histogram(alpha=0.5, position="stack") + 
  scale_fill_manual(name = 'All NBA', values = c('blue', 'red'), labels = c('No', 'Yes')) +
  scale_x_continuous(breaks = c(-4, -2, 0, 2, 4, 6, 8, 10, 12, 14)) +
  labs(title = 'BPM Histogram', caption = 'Data via basketball-reference.com',
       x = 'BPM') +
  theme(legend.title = element_text(), legend.background = element_rect(fill = 'snow2'),
        plot.background = element_rect(fill = "snow2"),
        panel.background = element_rect(fill = 'snow2'), plot.subtitle = element_text(hjust = 0.5),
        plot.title = element_text(hjust = 0.5), legend.position = 'top')
BPMhist


# correlations ----
cr1 <- as.matrix(nbacorr)
corrplotreal <- cor(cr1)
corrplot(corrplotreal, method = 'circle')

cr2 <- as.matrix(nbacorr2)
corrplotreal2 <- cor(cr2)
corrplot(corrplotreal2, method = 'circle')
# Data Partition ----
set.seed(1234)
ind <- sample(2, nrow(nba2), replace = T, prob = c(0.7, 0.3))
training <- nba2[ind == 1,]
test <- nba2[ind == 2,]

# KNN ----
# changing 0 and 1 for values of all-nba and allstar to 'No' and 'Yes' to avoid getting an error when executing
levels(nba2$allNBA) <- c('No', 'Yes')
levels(test$allNBA) <- c('No', 'Yes')
levels(training$allNBA) <- c('No', 'Yes')

trControl1 <- trainControl(method = 'repeatedcv',
                          number = 10,
                          repeats = 3,
                          classProbs = TRUE,
                          summaryFunction = twoClassSummary)
set.seed(222)
fit1 <- train(allNBA ~ .,
             data = nba2,
             method = 'knn',
             tuneLength = 20,
             trControl = trControl1,
             preProc = c('center', 'scale'),
             metric = 'ROC',
             tuneGrid = expand.grid(k = 1:60))

# Model Performance ----
fit1

# ROC Curve
plot(fit1)

# Confusion Matrix with the predicted vs actual values
pred1 <- predict(fit1, newdata = test)
pred1
cm <- confusionMatrix(pred1, test$allNBA) #85.4% accuracy
confusionMatrix(pred1, test$allNBA) #85.4% accuracy

# confusion matrix table creation code ----
# found from https://stackoverflow.com/questions/23891140/r-how-to-visualize-confusion-matrix-using-the-caret-package
draw_confusion_matrix <- function(cm) {
  
  total <- sum(cm$table)
  res <- as.numeric(cm$table)
  
  # Generate color gradients. Palettes come from RColorBrewer.
  greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
  redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
  getColor <- function (greenOrRed = "green", amount = 0) {
    if (amount == 0)
      return("#FFFFFF")
    palette <- greenPalette
    if (greenOrRed == "red")
      palette <- redPalette
    colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
  }
  
  # set the basic layout
  layout(matrix(c(1,1,2)))
  par(mar=c(2,2,2,2))
  plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
  title('Confusion Matrix with KNN', cex.main=2)
  
  # create the matrix 
  classes = colnames(cm$table)
  rect(150, 430, 240, 370, col=getColor("green", res[1]))
  text(195, 435, classes[1], cex=1.2)
  rect(250, 430, 340, 370, col=getColor("red", res[3]))
  text(295, 435, classes[2], cex=1.2)
  text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
  text(245, 450, 'Actual', cex=1.3, font=2)
  rect(150, 305, 240, 365, col=getColor("red", res[2]))
  rect(250, 305, 340, 365, col=getColor("green", res[4]))
  text(140, 400, classes[1], cex=1.2, srt=90)
  text(140, 335, classes[2], cex=1.2, srt=90)
  
  # add in the cm results
  text(195, 400, res[1], cex=1.6, font=2, col='white')
  text(195, 335, res[2], cex=1.6, font=2, col='white')
  text(295, 400, res[3], cex=1.6, font=2, col='white')
  text(295, 335, res[4], cex=1.6, font=2, col='white')
  
  # add in the specifics 
  plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
  text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
  text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
  text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
  text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
  text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
  text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
  text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
  text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
  text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
  text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
  
  # add in the accuracy information 
  text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
  text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
  text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
  text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}

draw_confusion_matrix(cm)

# Predicting All-NBA teams using pre allstar break data for the 2018-2019 season ----
pred2 <- predict(fit1, newdata = nbaAllStarTest3, type = 'prob')
pred2
